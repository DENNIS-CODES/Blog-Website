@page
@inject IViewLocalizer Localizer
@{
    ViewData["Title"] = Localizer["themes"];
}

    <div id="app" class="bf-content">
        <div id="themesList" class="bf-posts-grid d-flex">

            <div v-for="(theme, index) in themes" class="post-grid-col">
                <div class="post-grid-item">
                    <a class="item-link" v-bind:style="{ backgroundImage: 'url(' + webRoot + theme.cover + ')' }">
                        <div class="item-title mt-auto">&nbsp;</div>
                    </a>
                    <div class="item-info d-flex align-items-center">
                        <span class="item-date mr-auto">
                            {{ theme.title }}
                        </span>
                        <i v-if="theme.isCurrent" class="fas fa-star" style="color: #ffbe00; font-size: 1.3em"></i>
                        <button v-if="!theme.isCurrent" class="btn-unstyled item-favorite ml-3" v-on:click="select(theme.title)" data-tooltip="" title="Active" data-original-title="select">
                            <i class="far fa-star"></i>
                        </button>
                        <button v-if="theme.hasSettings" class="btn-unstyled item-show ml-3" v-on:click="settings(theme.title)" data-tooltip="" title="Settings" data-original-title="select">
                            <i class="fa fa-sliders-h"></i>
                        </button>

                        <a v-if="!theme.isCurrent" class="item-show ml-4" href="#" v-on:click="return remove(theme.title)" data-tooltip="" title="Delete" data-original-title="delete">
                            <i class="fas fa-trash" style="color: #ff6666"></i>
                        </a>
                    </div>
                </div>
            </div>

        </div>

        <div class="modal fade" id="dlgSettings" tabindex="-1" role="dialog" aria-hidden="true">
            <div class="modal-dialog" role="document">
                <div class="modal-content">
                    <div class="modal-header">
                        <h4 class="modal-title" id="hdrSettings">@Localizer["settings"]</h4>
                        <button type="button" class="close ml-2" title="Close" data-placement="bottom" data-tooltip data-dismiss="modal" aria-label="@Localizer["close"]">
                            <i class="fa fa-times"></i>
                        </button>
                    </div>
                    <div class="modal-body">
                        <form>
                            <div class="form-group">
                                <textarea rows="10" v-model="themeData" class="form-control" autofocus></textarea>
                            </div>
                            <button type="button" v-on:click="save()" class="btn btn-primary btn-main">@Localizer["save"]</button>
                        </form>
                    </div>
                </div>
            </div>
        </div>

    </div>

@section Scripts{
    <script>
        new Vue({
            el: "#app",
            data: {
                themes: [],
                themeSelected: '',
                themeData: {}
            },
            methods: {
                load: function (page) {
                    axios.get(webRoot + 'api/themes?page=' + page)
                        .then(response => {
                            this.themes = response.data;
                        })
                        .catch(function (error) { toastr.error(error); });
                },
                select: function(title){
                    axios.put(webRoot + 'api/themes/select/' + title)
                        .then(function (response) {
                            toastr.success('Updated');
                            setTimeout(function(){ location.reload(); }, 1000);
                        })
                        .catch(function (error) {
                            toastr.error(error);
                        });  
                },
                settings: function (title) {
                    this.themeSelected = title;

                    axios.get(webRoot + 'api/themes/data?theme=' + title)
                        .then(response => {
                            this.themeData = JSON.stringify(response.data, null, '\t');
                        })
                        .catch(function (error) { toastr.error(error); });

                    $('#dlgSettings').modal();
                },
                save: function () {
                    var dt = {
                        "theme": this.themeSelected,
                        "data": this.themeData
                    };
                    axios.post(webRoot + 'api/themes/data', dt)
                        .then(function (response) {
                            toastr.success('Updated');
                            $('#dlgSettings').modal('hide');
                        })
                        .catch(function (error) {
                            toastr.error(error);
                        });  
                },
                remove: function(title){
                    var result = confirm("Please confirm removing this theme");
                    if (result) {
                        axios.delete(webRoot + 'api/themes/remove/' + title)
                        .then(response => {
                            toastr.success('Removed');
                            setTimeout(function(){ location.reload(); }, 1000);
                        })
                        .catch(function (error) { toastr.error(error); });
                    }
                    return false;
                }
            },
            beforeMount() {
                this.load(1)
            }
        })
    </script>
}